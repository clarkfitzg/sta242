# Stats 242 Project

## Medium data EDA visualization benchmarks

Zhewen Hu and Clark Fitzgerald

### Abstract

Which plotting libraries are fastest and most efficient for 
exploratory analysis of medium sized data sets?
In this report we compare several popular plotting libraries by performing
basic exploratory data analysis (EDA) on a subset of the NYC taxi data set.

### Data

The data consists of a sample of the 2013 NYC taxi data from Assignment 5.
These are available at http://www.andresmh.com/nyctaxitrips/ and there is a
description of the fields at http://publish.illinois.edu/dbwork/open-data/.
Since we are interested in the performance of the libraries for working on
data in memory 
we wrote a program to randomly sample approximately 200 MB of the original 50 GB of data.
This produced a CSV file containing 1.25 million rows and 21
columns. Below is an example:

trip_time_in_secs   pickup_longitude    total_amount ...
-----------------   ----------------    ------------ ---
1685                -73.862839          38.3
...

### Libraries

We considered the following open source libraries from R and Python:

1. __R__ - Base R, using no extra packages
2. __ggplot2__ - popular R library
3. __ggmap__ - R library for spatial visualization
4. __Matplotlib__ - Established Python plotting library

### Evaluation

The following were the criteria for evaluation:

- __Speed__ The primary focus. How long to make a single plot? 
- __Aesthetics__ Do the defaults look reasonable or are additional tweaks
  needed?
- __Code Readability__ How expressive is the code? Extensibility?
  Maintainability? Learning curve?
- __Versatility__ Is it easy to show the output in different formats?

### Reproducibility

We've taken care to make sure that this analysis can be reproduced. Our
principal tool for this is GNU make.
The scripts are written in such a way that they time only the desired
steps. This excludes the time required to load in the data from disk.
The timings were done serially on a department server that typically has a
light load.

### Timings

Since timings are the most important result we present them here first.

![We observe ...](timingplots.png)

# Tasks

### Task 1: Histogram

Plot a histogram of the single variable `total_amount` for values of 
`total_amount` less than 100. Save the result to `histogram.png`.

![Matplotlib](matplotlib/histogram.png)
![R](R/histogram.png)
![ggplot2](ggplot2/histogram.png)

### Task 2: Alpha shading 

Scatter plot of two variables: trip time in minutes and `total_amount`
where the points are semi transparent. 
This shows the distribution of many points without completely overplotting.

Convert `trip_time_in_seconds` to minutes by dividing by 60.
Save the result to `alpha.png`.

![Matplotlib](matplotlib/alpha.png)
![R](R/alpha.png)
![ggplot2](ggplot2/alpha.png)

Filter for rides less than 1 hour and total amount less than 100. 
    Save the result to `alpha2.png`.

![Matplotlib](matplotlib/alpha2.png)
![R](R/alpha2.png)
![ggplot2](ggplot2/alpha2.png)

### Task 3: Sampling

Perform the same scatter plot as the alpha shading, but instead of plotting
all points choose a random sample without replacement of 300 points.
Save result to `sample.png`.

![Matplotlib](matplotlib/sample.png)
![R](R/sample.png)
![ggplot2](ggplot2/sample.png)

### Task 4: Boxplots

Boxplots of `total_amount` grouped by `payment_type` where `total_amount`
is less than 100.
Save result to `boxplot.png`.

![Matplotlib](matplotlib/boxplot.png)
![R](R/boxplot.png)
![ggplot2](ggplot2/boxplot.png)

####Spatial Visualization
For this part, we test the performance of ggmap by visualizing the pick-up longitude and latitude and drop-off latitude. The task is to see that if ggmap works well in expressing data information.

If we get the map source from Google, it is not easy to adjust the range of the map. Because Gmap source has its own default for the map. So it is more flexible to source from stamen map library. 
